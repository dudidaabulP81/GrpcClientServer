// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package grpcInterfaces

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TemperatureMeasurementsServiceClient is the client API for TemperatureMeasurementsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TemperatureMeasurementsServiceClient interface {
	GetMeasurementsData(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*MeasurementsDataResult, error)
	SetMeasurementData(ctx context.Context, in *SetRequest, opts ...grpc.CallOption) (*Empty, error)
}

type temperatureMeasurementsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTemperatureMeasurementsServiceClient(cc grpc.ClientConnInterface) TemperatureMeasurementsServiceClient {
	return &temperatureMeasurementsServiceClient{cc}
}

func (c *temperatureMeasurementsServiceClient) GetMeasurementsData(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*MeasurementsDataResult, error) {
	out := new(MeasurementsDataResult)
	err := c.cc.Invoke(ctx, "/TemperatureMeasurementsService/getMeasurementsData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *temperatureMeasurementsServiceClient) SetMeasurementData(ctx context.Context, in *SetRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/TemperatureMeasurementsService/setMeasurementData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TemperatureMeasurementsServiceServer is the server API for TemperatureMeasurementsService service.
// All implementations must embed UnimplementedTemperatureMeasurementsServiceServer
// for forward compatibility
type TemperatureMeasurementsServiceServer interface {
	GetMeasurementsData(context.Context, *GetRequest) (*MeasurementsDataResult, error)
	SetMeasurementData(context.Context, *SetRequest) (*Empty, error)
	//mustEmbedUnimplementedTemperatureMeasurementsServiceServer()
}

// UnimplementedTemperatureMeasurementsServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTemperatureMeasurementsServiceServer struct {
}

func (UnimplementedTemperatureMeasurementsServiceServer) GetMeasurementsData(context.Context, *GetRequest) (*MeasurementsDataResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMeasurementsData not implemented")
}
func (UnimplementedTemperatureMeasurementsServiceServer) SetMeasurementData(context.Context, *SetRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetMeasurementData not implemented")
}
func (UnimplementedTemperatureMeasurementsServiceServer) mustEmbedUnimplementedTemperatureMeasurementsServiceServer() {
}

// UnsafeTemperatureMeasurementsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TemperatureMeasurementsServiceServer will
// result in compilation errors.
type UnsafeTemperatureMeasurementsServiceServer interface {
	mustEmbedUnimplementedTemperatureMeasurementsServiceServer()
}

func RegisterTemperatureMeasurementsServiceServer(s grpc.ServiceRegistrar, srv TemperatureMeasurementsServiceServer) {
	s.RegisterService(&TemperatureMeasurementsService_ServiceDesc, srv)
}

func _TemperatureMeasurementsService_GetMeasurementsData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TemperatureMeasurementsServiceServer).GetMeasurementsData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/TemperatureMeasurementsService/getMeasurementsData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TemperatureMeasurementsServiceServer).GetMeasurementsData(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TemperatureMeasurementsService_SetMeasurementData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TemperatureMeasurementsServiceServer).SetMeasurementData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/TemperatureMeasurementsService/setMeasurementData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TemperatureMeasurementsServiceServer).SetMeasurementData(ctx, req.(*SetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TemperatureMeasurementsService_ServiceDesc is the grpc.ServiceDesc for TemperatureMeasurementsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TemperatureMeasurementsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "TemperatureMeasurementsService",
	HandlerType: (*TemperatureMeasurementsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "getMeasurementsData",
			Handler:    _TemperatureMeasurementsService_GetMeasurementsData_Handler,
		},
		{
			MethodName: "setMeasurementData",
			Handler:    _TemperatureMeasurementsService_SetMeasurementData_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "grpcInterfaces/temperatureMeasurements.proto",
}
